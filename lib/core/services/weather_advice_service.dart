import '../models/weather_advice.dart';
import '../../features/weather/domain/entities/weather.dart';
import '../../features/forecast/domain/entities/forecast.dart';

class WeatherAdviceService {
  static List<WeatherAdvice> getWeatherAdvice(Weather weather, [Forecast? forecast]) {
    final List<WeatherAdvice> advices = [];
    
    // Analyze current weather condition
    final condition = weather.condition.toLowerCase();
    final temperature = weather.temperature;
    final uvIndex = weather.uvIndex;
    final humidity = weather.humidity;
    final windSpeed = weather.windSpeed;
    
    // Rain/Storm advice
    if (_isRainyWeather(condition)) {
      advices.add(WeatherAdvice(
        icon: '‚òî',
        title: 'Nh·ªõ mang √¥',
        description: 'H√¥m nay c√≥ m∆∞a, ƒë·ª´ng qu√™n mang theo √¥ ƒë·ªÉ tr√°nh ∆∞·ªõt.',
        priority: WeatherAdvicePriority.high,
        type: WeatherAdviceType.rain,
      ));
    }
    
    // Heavy rain/storm warning
    if (_isHeavyRainOrStorm(condition)) {
      advices.add(WeatherAdvice(
        icon: '‚õàÔ∏è',
        title: 'C·∫£nh b√°o m∆∞a to',
        description: 'M∆∞a to ho·∫∑c b√£o. H·∫°n ch·∫ø ra ngo√†i n·∫øu kh√¥ng c·∫ßn thi·∫øt.',
        priority: WeatherAdvicePriority.urgent,
        type: WeatherAdviceType.storm,
      ));
    }
    
    // Hot/Sunny weather advice
    if (_isSunnyHotWeather(condition, temperature)) {
      advices.add(WeatherAdvice(
        icon: 'üß¢',
        title: 'ƒê·ªôi m≈© khi ra ngo√†i',
        description: 'Tr·ªùi n·∫Øng g·∫Øt, h√£y ƒë·ªôi m≈© v√† u·ªëng nhi·ªÅu n∆∞·ªõc.',
        priority: WeatherAdvicePriority.medium,
        type: WeatherAdviceType.sun,
      ));
    }
    
    // UV warning
    if (uvIndex > 7) {
      advices.add(WeatherAdvice(
        icon: 'üß¥',
        title: 'Thoa kem ch·ªëng n·∫Øng',
        description: 'Ch·ªâ s·ªë UV cao (${uvIndex.round()}), c·∫ßn b·∫£o v·ªá da kh·ªèi tia UV.',
        priority: WeatherAdvicePriority.high,
        type: WeatherAdviceType.uv,
      ));
    }
    
    // Cold weather advice
    if (temperature < 15) {
      advices.add(WeatherAdvice(
        icon: 'üß•',
        title: 'M·∫∑c √°o ·∫•m',
        description: 'Nhi·ªát ƒë·ªô th·∫•p (${temperature.round()}¬∞C), h√£y m·∫∑c √°o ·∫•m.',
        priority: WeatherAdvicePriority.medium,
        type: WeatherAdviceType.cold,
      ));
    }
    
    // Windy weather advice
    if (windSpeed > 30) {
      advices.add(WeatherAdvice(
        icon: 'üå™Ô∏è',
        title: 'Gi√≥ m·∫°nh',
        description: 'Gi√≥ m·∫°nh ${windSpeed.round()} km/h, c·∫©n th·∫≠n khi di chuy·ªÉn.',
        priority: WeatherAdvicePriority.medium,
        type: WeatherAdviceType.wind,
      ));
    }
    
    // High humidity advice
    if (humidity > 85) {
      advices.add(WeatherAdvice(
        icon: 'üíß',
        title: 'ƒê·ªô ·∫©m cao',
        description: 'ƒê·ªô ·∫©m ${humidity}%, c√≥ th·ªÉ c·∫£m th·∫•y oi b·ª©c.',
        priority: WeatherAdvicePriority.low,
        type: WeatherAdviceType.humidity,
      ));
    }
    
    // Check forecast for rain prediction
    if (forecast != null) {
      final todayForecast = _getTodayForecast(forecast);
      if (todayForecast != null && todayForecast.precipitationChance > 60) {
        advices.add(WeatherAdvice(
          icon: 'üåßÔ∏è',
          title: 'C√≥ th·ªÉ c√≥ m∆∞a',
          description: 'Kh·∫£ nƒÉng m∆∞a ${todayForecast.precipitationChance}% h√¥m nay.',
          priority: WeatherAdvicePriority.medium,
          type: WeatherAdviceType.forecast,
        ));
      }
    }
    
    // Sort by priority (urgent -> high -> medium -> low)
    advices.sort((a, b) => a.priority.index.compareTo(b.priority.index));
    
    return advices;
  }
  
  static bool _isRainyWeather(String condition) {
    final rainyKeywords = [
      'rain', 'm∆∞a', 'drizzle', 'shower', 'precipitation',
      'light rain', 'moderate rain', 'heavy rain',
      'm∆∞a r√†o', 'm∆∞a nh·ªè', 'm∆∞a v·ª´a', 'm∆∞a to'
    ];
    
    return rainyKeywords.any((keyword) => condition.contains(keyword.toLowerCase()));
  }
  
  static bool _isHeavyRainOrStorm(String condition) {
    final stormKeywords = [
      'heavy rain', 'storm', 'thunderstorm', 'downpour',
      'm∆∞a to', 'm∆∞a t·∫ßm t√£', 'b√£o', 'gi√¥ng', 's·∫•m ch·ªõp'
    ];
    
    return stormKeywords.any((keyword) => condition.contains(keyword.toLowerCase()));
  }
  
  static bool _isSunnyHotWeather(String condition, double temperature) {
    final sunnyKeywords = [
      'sunny', 'clear', 'hot', 'n·∫Øng', 'quang ƒë√£ng', 'n√≥ng'
    ];
    
    final isSunny = sunnyKeywords.any((keyword) => condition.contains(keyword.toLowerCase()));
    return isSunny || temperature > 30;
  }
  
  static DailyForecast? _getTodayForecast(Forecast forecast) {
    final today = DateTime.now();
    try {
      return forecast.dailyForecasts.firstWhere(
        (daily) => 
          daily.date.year == today.year &&
          daily.date.month == today.month &&
          daily.date.day == today.day,
      );
    } catch (e) {
      return forecast.dailyForecasts.isNotEmpty ? forecast.dailyForecasts.first : null;
    }
  }
}